generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model activity_logs {
  id          String     @id
  customerId  String?
  userId      String?
  action      String
  entity      String
  entityId    String?
  description String
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime   @default(now())
  customers   customers? @relation(fields: [customerId], references: [id])
  users       users?     @relation(fields: [userId], references: [id])
}

model admins {
  id        String    @id
  email     String    @unique
  password  String
  name      String
  role      String    @default("super_admin")
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime
  lastLogin DateTime?
}

model customers {
  id                    String            @id
  company               String
  owner                 String
  email                 String            @unique
  phone                 String?
  website               String?
  taxId                 String?
  industry              String?
  companySize           String?
  planId                String?
  billingCycle          String            @default("monthly")
  mrr                   Float             @default(0)
  trialEndsAt           DateTime?
  subscriptionStartDate DateTime?
  status                String            @default("trial")
  lastLogin             DateTime?
  propertyLimit         Int               @default(5)
  userLimit             Int               @default(3)
  storageLimit          Int               @default(1000)
  street                String?
  city                  String?
  state                 String?
  postalCode            String?
  country               String            @default("Nigeria")
  createdAt             DateTime          @default(now())
  updatedAt             DateTime
  propertiesCount       Int               @default(0)
  unitsCount            Int               @default(0)
  notes                 String?
  activity_logs         activity_logs[]
  plans                 plans?            @relation(fields: [planId], references: [id])
  invoices              invoices[]
  properties            properties[]
  support_tickets       support_tickets[]
  users                 users[]
  customer_users        customer_users[]
}

model invoices {
  id            String    @id
  customerId    String
  invoiceNumber String    @unique
  amount        Float
  currency      String    @default("NGN")
  status        String    @default("pending")
  dueDate       DateTime
  paidAt        DateTime?
  billingPeriod String
  description   String?
  items         Json
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  refundedAt    DateTime?
  customers     customers @relation(fields: [customerId], references: [id], onDelete: Cascade)
  refunds       refunds[]
}

model leases {
  id                String     @id
  propertyId        String
  unitId            String
  tenantId          String
  leaseNumber       String     @unique
  startDate         DateTime
  endDate           DateTime
  monthlyRent       Float
  securityDeposit   Float
  currency          String     @default("NGN")
  status            String     @default("active")
  terms             String?
  specialClauses    Json?
  signedAt          DateTime?
  terminatedAt      DateTime?
  terminationReason String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime
  properties        properties @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  users             users      @relation(fields: [tenantId], references: [id])
  units             units      @relation(fields: [unitId], references: [id])
}

model plans {
  id            String      @id
  name          String      @unique
  description   String?
  monthlyPrice  Float
  annualPrice   Float
  currency      String      @default("NGN")
  propertyLimit Int
  userLimit     Int
  storageLimit  Int
  features      Json
  isActive      Boolean     @default(true)
  isPopular     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  customers     customers[]
}

model properties {
  id                    String              @id
  customerId            String
  ownerId               String
  name                  String
  propertyType          String
  address               String
  city                  String
  state                 String
  postalCode            String
  country               String              @default("Nigeria")
  yearBuilt             Int?
  totalUnits            Int
  floors                Int?
  totalArea             Float?
  lotSize               Float?
  parking               Int?
  currency              String              @default("NGN")
  avgRent               Float?
  status                String              @default("active")
  features              Json?
  unitFeatures          Json?
  insuranceProvider     String?
  insurancePolicyNumber String?
  insurancePremium      Float?
  insuranceExpiration   DateTime?
  propertyTaxes         Float?
  coverImage            String?
  images                Json?
  description           String?
  notes                 String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime
  securityDeposit       Float?
  applicationFee        Float?
  cautionFee            Float?
  legalFee              Float?
  agentCommission       Float?
  serviceCharge         Float?
  agreementFee          Float?
  purchasePrice         Float?
  currentValue          Float?
  leases                leases[]
  customers             customers           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  users                 users               @relation(fields: [ownerId], references: [id])
  property_managers     property_managers[]
  units                 units[]
}

model customer_users {
  id          String     @id
  customerId  String
  userId      String
  role        String
  permissions Json?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime

  customers   customers  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  users       users      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([customerId, userId])
}

model property_managers {
  id          String     @id
  propertyId  String
  managerId   String
  permissions Json?
  isActive    Boolean    @default(true)
  assignedAt  DateTime   @default(now())
  users       users      @relation(fields: [managerId], references: [id])
  properties  properties @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, managerId])
}

model refunds {
  id         String   @id
  invoiceId  String
  amount     Float
  currency   String   @default("NGN")
  reason     String?
  actorId    String?
  externalId String?
  metadata   Json?
  createdAt  DateTime @default(now())
  invoices   invoices @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model roles {
  id          String   @id
  name        String   @unique
  description String?
  permissions Json
  isActive    Boolean  @default(true)
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model support_tickets {
  id           String    @id
  customerId   String
  ticketNumber String    @unique
  subject      String
  description  String
  category     String
  priority     String    @default("medium")
  status       String    @default("open")
  assignedTo   String?
  resolution   String?
  resolvedAt   DateTime?
  attachments  Json?
  tags         String[]  @default([])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  customers    customers @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model system_settings {
  id          String   @id
  key         String   @unique
  value       Json
  category    String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model units {
  id              String     @id
  propertyId      String
  unitNumber      String
  type            String
  floor           Int?
  bedrooms        Int
  bathrooms       Float
  size            Float?
  monthlyRent     Float
  securityDeposit Float?
  status          String     @default("vacant")
  features        Json?
  images          Json?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime
  leases          leases[]
  properties      properties @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, unitNumber])
}

model users {
  id                String              @id
  customerId        String?
  name              String
  email             String              @unique
  password          String?
  phone             String?
  role              String
  department        String?
  company           String?
  isActive          Boolean             @default(true)
  status            String              @default("pending")
  lastLogin         DateTime?
  invitedAt         DateTime?
  acceptedAt        DateTime?
  permissions       Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  activity_logs     activity_logs[]
  leases            leases[]
  properties        properties[]
  property_managers property_managers[]
  customers         customers?          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customer_users    customer_users[]
}
